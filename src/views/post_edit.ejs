<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Edit Post</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
  <link href="/css/custom.css" rel="stylesheet">
  <!-- TinyMCE -->
  <script src="https://cdn.tiny.cloud/1/842r9kzv479q195q45mvsiekgpy2ga0dvfrvybnh6mix1kf8/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
  <style>
    .editor-card { border: none; box-shadow: 0 6px 16px rgba(0,0,0,0.08); }
    #editor-status { font-size: .9rem; }
  </style>
</head>
<body class="bg-light">
  <div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h3 class="mb-0">
        <i class="bi bi-pencil-square"></i>
        Edit Post
      </h3>
      <a href="/boards/<%= boardId %>/posts" class="btn btn-outline-secondary"><i class="bi bi-arrow-left"></i> Back</a>
    </div>

    <div class="card editor-card">
      <div class="card-body">
        <div id="editor-status" class="text-muted mb-2"><i class="bi bi-info-circle"></i> Initializing editor...</div>
        <form action="/boards/posts/edit?boardId=<%= boardId %>&postId=<%= post._id %>" method="POST" enctype="multipart/form-data" onsubmit="return handleFormSubmit(event)">
          <div class="mb-3">
            <label class="form-label">Title</label>
            <input type="text" class="form-control" name="title" placeholder="Enter title" value="<%= post.title %>" required />
          </div>

          <div class="mb-3">
            <label class="form-label">Content</label>
            <div id="initial-content" style="display: none;"><%= post.content %></div>
            <textarea id="editor" name="content"></textarea>
          </div>

          <!-- Existing Images Section -->
          <% if (post.images && post.images.length > 0) { %>
          <div class="mb-3">
            <label class="form-label">Current Images</label>
            <div class="row g-2">
              <% post.images.forEach((image, index) => { %>
                <div class="col-6 col-md-4 col-lg-3">
                  <div class="position-relative">
                    <img src="<%= image.url %>" class="img-fluid rounded border" alt="Image <%= index + 1 %>">
                    <div class="form-check position-absolute" style="top: 5px; left: 5px;">
                      <input class="form-check-input" type="checkbox" name="deleteImages" value="<%= image._id %>" id="deleteImage<%= index %>">
                      <label class="form-check-label text-white bg-dark bg-opacity-75 px-1 rounded" for="deleteImage<%= index %>" title="Delete this image">
                        <i class="bi bi-trash"></i>
                      </label>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
            <div class="form-text">Check the box to delete images</div>
          </div>
          <% } %>

          <div class="mb-3">
            <label class="form-label">Add More Images (optional)</label>
            <input type="file" name="images" class="form-control" accept="image/*" multiple>
            <div class="form-text">You can upload up to 20 images in total</div>
          </div>

          <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="button" class="btn btn-outline-secondary me-md-2" onclick="history.back()">
              <i class="bi bi-x-lg"></i> Cancel
            </button>
            <button type="submit" class="btn btn-primary">
              <i class="bi bi-save"></i> Save Changes
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    function handleFormSubmit(event) {
      console.log('🚀 Form submit triggered');

      // Get content from TinyMCE
      const editor = tinymce.get('editor');
      if (editor) {
        const content = editor.getContent();
        console.log('📝 TinyMCE content length:', content.length);
        console.log('📝 Content preview:', content.substring(0, 50));

        // Set the content to the hidden textarea
        const contentField = document.querySelector('textarea[name="content"]');
        if (contentField) {
          contentField.value = content;
          console.log('✅ Content set to textarea, length:', contentField.value.length);
        } else {
          console.error('❌ Content textarea not found!');
          return false;
        }
      } else {
        console.error('❌ TinyMCE editor not found!');
        return false;
      }

      // Get title value
      const titleField = document.querySelector('input[name="title"]');
      if (titleField) {
        console.log('📋 Title value:', titleField.value);
      }

      // Allow form to submit normally
      return true;
    }

    function initTinyMCE() {
      if (!window.tinymce) {
        document.getElementById('editor-status').innerHTML = '<span class="text-danger"><i class="bi bi-x-circle"></i> Failed to load TinyMCE CDN. Check your network or use an API key.</span>';
        return;
      }
      tinymce.init({
        selector: '#editor',
        height: 500,
        menubar: true,
        // Removed deprecated 'template' plugin, added 'advtemplate'
        plugins: 'preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media advtemplate codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons',
        toolbar: 'undo redo | bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent | numlist bullist | forecolor backcolor removeformat | image media link codesample table | fullscreen preview',
        toolbar_mode: 'sliding',
        image_title: true,
        automatic_uploads: true,
        // Disable TinyMCE branding and promotion
        promotion: false,
        branding: false,
        // 알림 메시지 비활성화
        statusbar: false,
        // 이미지 업로드 상태 표시 개선
        images_reuse_filename: true,
        images_upload_credentials: false,
        // 에러 메시지 개선
        setup: function(editor) {
          editor.on('UploadProgress', function(e) {
            // 업로드 진행 중인 경우에만 상태 표시
            if (e.percent < 100) {
              editor.notificationManager.open({
                text: '이미지 업로드 중...',
                type: 'info',
                timeout: 2000
              });
            }
          });
          
          // 업로드 성공 시 알림 표시
          editor.on('uploadSuccess', function(e) {
            editor.notificationManager.close();
          });
          
          // 업로드 실패 시 알림 표시
          editor.on('uploadError', function(e) {
            editor.notificationManager.open({
              text: '이미지 업로드에 실패했습니다.',
              type: 'error',
              timeout: 3000
            });
          });
        },
        images_upload_handler: function (blobInfo, success, failure) {
          return new Promise((resolve, reject) => {
            // Get current board ID from URL
            const urlParts = window.location.pathname.split('/');
            const boardId = urlParts[2]; // Assuming URL is /boards/:boardId/posts/:postId/edit
            
            if (!boardId) {
              const error = 'Board ID not found in URL';
              console.error(error);
              if (typeof failure === 'function') failure(error);
              reject(error);
              return;
            }
            
            const formData = new FormData();
            formData.append('file', blobInfo.blob(), blobInfo.filename());
            
            console.log('Starting file upload for board:', boardId);
            
            fetch(`/boards/${boardId}/editor/upload-image`, {
              method: 'POST',
              body: formData,
              credentials: 'same-origin' // Include cookies for session
            })
            .then(response => {
              console.log('Upload response status:', response.status);
              if (!response.ok) {
                return response.text().then(text => {
                  throw new Error(`Upload failed: ${response.status} - ${text}`);
                });
              }
              return response.json();
            })
            .then(data => {
              console.log('Upload response data:', data);
              if (data && data.location) {
                const fileUrl = data.location;
                console.log('File uploaded successfully:', fileUrl);
                if (typeof success === 'function') {
                  success(fileUrl);
                }
                resolve(fileUrl);
              } else {
                throw new Error('Invalid response format: ' + JSON.stringify(data));
              }
            })
            .catch(error => {
              console.error('Upload error:', error);
              if (typeof failure === 'function') {
                failure('이미지 업로드에 실패했습니다: ' + error.message);
              }
              reject(error);
            });
          });
        },
        file_picker_types: 'image media file',
        file_picker_callback: function (callback, value, meta) {
          const input = document.createElement('input');
          input.setAttribute('type', 'file');
          input.setAttribute('accept', 'image/*,application/pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.zip');
          
          input.onchange = function () {
            const file = this.files[0];
            const formData = new FormData();
            formData.append('file', file);
            // Use boardId from URL or default to 'default'
            const siteName = window.location.pathname.split('/')[2] || 'default';
            formData.append('siteName', siteName);

            fetch('/api/upload', {
              method: 'POST',
              body: formData
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(data => {
              if (data.file && data.file.url) {
                // Ensure the URL is absolute
                const fileUrl = data.file.url.startsWith('http') ? 
                  data.file.url : 
                  `${window.location.origin}${data.file.url}`;
                callback(fileUrl, { title: file.name });
              } else {
                throw new Error('Invalid response format');
              }
            })
            .catch(error => {
              console.error('Upload error:', error);
              alert('파일 업로드에 실패했습니다. 다시 시도해주세요.');
            });
          };
          
          input.click();
        },
        convert_urls: false,
        content_style: 'body { font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; font-size: 16px; }',
        mobile: {
          menubar: false,
          toolbar: 'undo redo | bold italic underline | bullist numlist | link image | removeformat'
        },
        setup: (editor) => {
          editor.on('init', () => {
            const el = document.getElementById('editor-status');
            if (el) el.innerHTML = '<span class="text-success"><i class="bi bi-check-circle"></i> Editor ready</span>';
            // Set initial content when editing
            try {
              const initial = document.getElementById('initial-content');
              if (initial) {
                editor.setContent(initial.innerHTML);
              }
            } catch (e) {}
          });
        }
      });
    }

    // Initialize TinyMCE when the page loads
    document.addEventListener('DOMContentLoaded', function() {
      initTinyMCE();
    });
  </script>
</body>
</html>
