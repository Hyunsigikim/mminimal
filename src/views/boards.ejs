<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Boards</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/css/custom.css" rel="stylesheet">

    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin=""/>

    <style>
        /* Minimal custom styles for boards page */
        .map-container {
            height: 500px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .board-card {
            transition: all 0.2s ease;
            border: none;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            height: 100%;
        }

        .board-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .board-link {
            text-decoration: none;
            color: inherit;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .board-link:hover {
            color: inherit;
        }

        .board-location {
            color: #6c757d;
            font-size: 0.875rem;
            margin-top: auto;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container-fluid py-4">
        <div class="row justify-content-center">
            <div class="col-lg-10 col-xl-9">
                <!-- Header -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-body text-center py-4">
                        <h1 class="card-title mb-2">현장관리</h1>
                        <p class="text-muted mb-0">위치 기반의 현장</p>
                    </div>
                </div>

                <!-- Map Section -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white border-bottom-0 d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="bi bi-map"></i> 지도</h5>
                        <button id="toggle-hidden-btn" type="button" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-eye-slash"></i> 숨김 보드 보기: OFF
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div id="map" class="map-container" data-user-lat="<%= currentUserLocation ? currentUserLocation.latitude : '' %>" data-user-lng="<%= currentUserLocation ? currentUserLocation.longitude : '' %>"></div>
                    </div>
                    <div class="card-footer bg-light">
                        <small class="text-muted">
                            <i class="bi bi-info-circle"></i> 지도를 클릭하여 현장 위치를 설정할 수 있습니다!<br>
                            <i class="bi bi-mouse2"></i> 현장 마커를 더블클릭하여 현장으로 이동할 수 있습니다!
                        </small>
                    </div>
                </div>

                <!-- Boards Grid -->
                <div class="row g-3 mb-4">
                    <% boards.forEach(board => { %>
                    <div class="col-md-6 col-lg-4">
                        <div class="card board-card h-100">
                            <div class="card-body d-flex flex-column">
                                <a href="/boards/<%= board._id %>/posts" class="board-link">
                                    <h6 class="card-title text-dark mb-2"><%= board.name %></h6>
                                    <p class="card-text text-muted small mb-3">
                                        <%= board.description || 'No description available' %>
                                    </p>
                                    <div class="board-location mt-auto">
                                        <i class="bi bi-geo-alt"></i>
                                        <% if (board.latitude && board.longitude && board.latitude !== 0 && board.longitude !== 0) { %>
                                            <%= board.latitude %>, <%= board.longitude %>
                                        <% } else { %>
                                            위치 정보가 없습니다.
                                        <% } %>
                                    </div>
                                </a>
                            </div>
                        </div>
                    </div>
                    <% }); %>
                </div>

                <% if (boards.length === 0) { %>
                <!-- Empty State -->
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-pin-map display-1 text-muted mb-3"></i>
                        <h5 class="text-muted">현장이 없습니다.</h5>
                        <p class="text-muted mb-0">현장 생성을 시작해주세요!</p>
                    </div>
                </div>
                <% } %>

                <!-- Create Board Section (Toggle) -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white border-bottom-0 d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="bi bi-plus-circle"></i> 현장 생성</h5>
                        <a href="/boards/new" class="btn btn-primary btn-sm">
                            <i class="bi bi-plus-circle"></i> 새 현장 만들기
                        </a>
                    </div>

                <!-- Navigation -->
                <div class="card border-0 shadow-sm mt-4">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                            <span class="text-muted">현장 관리 프로그램 0.01</span>
                            <div class="d-flex gap-2">
                                <a href="/profile" class="btn btn-outline-info btn-sm">
                                    <i class="bi bi-person-circle"></i> 프로필
                                </a>
                                <a href="/logout" class="btn btn-outline-danger btn-sm">
                                    <i class="bi bi-box-arrow-right"></i> 로그아웃
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Data Containers -->
    <script id="user-data" type="application/json"><%- JSON.stringify(user) %></script>
    <script id="board-data" type="application/json"><%- JSON.stringify(boards) %></script>

    <script>
        // Initialize data
        const userData = JSON.parse(document.getElementById('user-data').textContent || 'null');
        const boardData = JSON.parse(document.getElementById('board-data').textContent || '[]');
        let userPreferredLocation = null;
        
        // Initialize map
        const map = L.map('map').setView([37.5665, 126.9780], 10);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18
        }).addTo(map);
        
        // Map utility functions
        const mapUtils = {
            // Set map view to specific coordinates
            setView: (lat, lng, zoom = 15) => map.setView([lat, lng], zoom),
            
            // Request current GPS location
            requestCurrentLocation: () => {
                if (!navigator.geolocation) {
                    console.log('Geolocation is not supported');
                    mapUtils.useAccountLocation();
                    return;
                }

                navigator.geolocation.getCurrentPosition(
                    position => {
                        const { latitude: lat, longitude: lng } = position.coords;
                        console.log('GPS location obtained:', lat, lng);
                        mapUtils.setView(lat, lng, 16);
                        userPreferredLocation = { lat, lng };
                        mapUtils.updateLocationFields(lat, lng);
                    },
                    error => {
                        console.log('GPS error:', error.code, error.message);
                        mapUtils.useAccountLocation();
                    },
                    { enableHighAccuracy: true, timeout: 10000, maximumAge: 300000 }
                );
            },
            
            // Use account location as fallback
            useAccountLocation: () => {
                if (userData?.latitude && userData?.longitude) {
                    const { latitude: lat, longitude: lng } = userData;
                    console.log('Using account location:', lat, lng);
                    mapUtils.setView(lat, lng, 15);
                    userPreferredLocation = { lat, lng };
                } else {
                    console.log('No location data available');
                }
            },
            
            // Update location input fields
            updateLocationFields: (lat, lng) => {
                const inputs = {
                    lat: document.querySelector('input[name="latitude"]'),
                    lng: document.querySelector('input[name="longitude"]')
                };
                
                if (inputs.lat && inputs.lng) {
                    inputs.lat.value = lat.toFixed(6);
                    inputs.lng.value = lng.toFixed(6);
                }
            }
        };

        // Request location on page load
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(mapUtils.requestCurrentLocation, 100);
        });

        // Board data is now available from the parsed JSON
        let showHidden = false;
        const visibleLayers = [];
        const hiddenLayers = [];

        function makePopup(board) {
            return (
                '<strong>' + (board.name || 'Untitled') + '</strong>' +
                '<br><a href="/boards/' + board._id + '/posts">View Posts</a>'
            );
        }

        function addVisibleLayer(layer) {
            layer.addTo(map);
            visibleLayers.push(layer);
        }

        function buildMarkers() {
            // Clear existing layers from map
            visibleLayers.forEach(l => map.removeLayer(l));
            visibleLayers.length = 0;
            hiddenLayers.forEach(l => map.removeLayer(l));
            hiddenLayers.length = 0;

            boardData.forEach(function(board) {
                const lat = board.latitude || 0;
                const lng = board.longitude || 0;
                const status = board.siteStatus || '정상';
                const hasLocation = !(lat === 0 && lng === 0);
                const coords = hasLocation ? [lat, lng] : [37.5665, 126.9780];

                // Determine layer type by status
                if (status === '숨김') {
                    const hiddenMarker = L.marker(coords, { opacity: 0.6 }).bindPopup(makePopup(board));
                    hiddenMarker.on('dblclick', function() {
                        window.location.href = '/boards/' + board._id + '/posts';
                    });
                    // Only add if showHidden is true
                    if (showHidden) {
                        addVisibleLayer(hiddenMarker);
                    }
                    hiddenLayers.push(hiddenMarker);
                } else if (status === '정상') {
                    const marker = L.marker(coords).bindPopup(makePopup(board));
                    // Show site name label above normal markers
                    const label = board.name || 'Untitled';
                    marker.bindTooltip(label, { permanent: true, direction: 'top', offset: [0, -10], opacity: 0.9 });
                    marker.on('dblclick', function() {
                        window.location.href = '/boards/' + board._id + '/posts';
                    });
                    addVisibleLayer(marker);
                } else {
                    // Other statuses -> gray circle marker
                    const circle = L.circleMarker(coords, {
                        radius: 8,
                        color: '#6c757d',
                        weight: 2,
                        fillColor: '#6c757d',
                        fillOpacity: 0.9
                    }).bindPopup(makePopup(board));
                    circle.on('dblclick', function() {
                        window.location.href = '/boards/' + board._id + '/posts';
                    });
                    addVisibleLayer(circle);
                }
            });

            fitToVisible();
        }

        function fitToVisible() {
            const bounds = [];
            visibleLayers.forEach(layer => {
                if (layer.getLatLng) {
                    const ll = layer.getLatLng();
                    bounds.push([ll.lat, ll.lng]);
                }
            });
            if (bounds.length > 0) {
                map.fitBounds(bounds, { padding: [20, 20] });
            }
        }

        // Initial marker build
        buildMarkers();

        // Toggle hidden boards
        const toggleBtn = document.getElementById('toggle-hidden-btn');
        toggleBtn.addEventListener('click', function() {
            showHidden = !showHidden;
            toggleBtn.innerHTML = showHidden
                ? '<i class="bi bi-eye"></i> 숨김 보드 보기: ON'
                : '<i class="bi bi-eye-slash"></i> 숨김 보드 보기: OFF';
            buildMarkers();
        });

    </script>
</body>
</html>
